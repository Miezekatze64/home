{
  "type": "dir",
  "children": {
    ".": {
      "type": "dir",
      "children": {}
    },
    "index.md": {
      "type": "file",
      "content": "# Main page\nThis is a test\n"
    },
    "..": {
      "type": "dir",
      "children": {}
    },
    "fold": {
      "type": "dir",
      "children": {
        ".": {
          "type": "dir",
          "children": {}
        },
        "README.md": {
          "type": "file",
          "content": "# Fold - A functional programming language\n\nA (purely) functional programming language\n\nThis language is being developed as part of a [ABA](https://www.ahs-aba.at/).\n\n## Features\n- [x] working parser\n- [x] basic syntax (expressions, function application)\n- [x] compilation to combinator graph\n- [x] reduction/interpretation of graph\n- [x] type inference (hindley-milner)\n- [x] let bindings\n- [x] garbage collection\n- [x] sections (*1), (-2), ...\n- [x] lambda functions\n- [x] data structures\n- [x] lists / strings\n- [x] char stdlib (char <-> int)?\n- [x] comments\n- [x] interfaces, type classes, etc\n- [x] inference of \"type classes\"\n- [x] standard library\n- [x] extern function calls / FFI\n- [x] I/O\n- [x] compilation to SKIBC\n- [x] name\n- [x] forward declarations\n- [x] entry point that calls main using forward declaration with io type. \n- [x] &{entry} pragma to change main function name\n- [x] NodeJS target\n- [ ] &{global} pragma for type definitions (makes all constructors globally available \\[e. g. true === bool::true, ...\\])\n- [ ] autogenerated instances (either pragma or metaprogramming over type fields)\n- [ ] -infix- syntax\n- [ ] `x y => f x y` as syntactic sugar for `x => y => f x y`\n- [ ] scope for alias/macro \\[type/kind/expr\\]\n- [ ] `_` for discard\n- [ ] pattern matching on function definition\n- [ ] syntax for applying and capturing interface dictionaries\n- [ ] a way of creating custom constraints (with checks for uniqueness / explicit instances)\n- [ ] ...\n\n## TODOs\n- [x] fix nested let and lambda bugs\n- [x] change method to return values in direct-exec compiler, currently does not update graph, values are computated too many\n      times, probably biggest performance bottleneck there currently\n- [ ] toplevel dependency analysis, fixes hoisting bug (maybe per namespace?)\n- [ ] disallow ::prim namespace\n- [ ] throw error when using qualified variable in pattern that is not constructor\n- [ ] disallow duplicate definitions in `main`\n- [ ] fix associativity bug (right + left mixed causes bugs, if possible rework operator resolution completely).\n- [ ] better type annotation syntax (let f (x: int): int = x)\n- [ ] implicit match \\[let f = match { .. } => let f = x => match x { ... }\\]\n- [ ] allow freestanding type annotations\n- [ ] list patterns\n- [ ] change toplevel syntax to not use let as semantics are different (maybe def?)\n- [ ] allow pattern matching on function/let definition \\[some kind of guard syntax, maybe allow bools here too, would require bool pragma\\]\n- [ ] fix bug in TIGRE-native GC implementation (see 04-raylib)\n- [ ] rewrite this entire codebase in a more readable style \\[e.g. mtl\\]\n- [ ] introduce better string type\n- [ ] introduce fast-path for int-to-string, currently slowest part in 02-factorial.fl\n- [ ] make kinds equivalent to types, infer kinds (=types of types)\n- [ ] dependent types?\n- [ ] ...\n\n<p class=\"todo\">The REPL is currently in a sleeping state and does *not* support newer \nfeatures like the preservation of type classes over multiple lines.\nUse it at your own risk.</p>\n\n## Usage\n```sh\n# cabal 3.12.1.0, ghc 9.10.1 (installed via GHCup)\ncabal update\n# run\n./build.sh run main.fl\n# or\n./build.sh\n./target/foldc main.fl\n\n# interpret [GENERALLY RECOMMENDED]\n./target/foldc main.fl\n# native compilation [x86_64 linux, A BIT UNSTABLE]\n./target/foldc --compile main.fl && ./main\n# node js [RECOMMENDED FOR SPPED]\n./target/foldc --js main.fl && node ./main.js\n```\n\n### Docker\n\n```sh\ndocker build --tag fold:foldc .\ndocker run -v .:/tmp/share -it fold:foldc\n/opt/foldc/target/foldc /tmp/share/main.fl\n# or\n/opt/foldc/target/foldc --compile /tmp/share/main.fl\n/tmp/share/main\n```\n\n## Contributing\nsee [CONTRIBUTING]\n\n[CONTRIBUTING]: CONTRIBUTING.md\n"
        },
        "..": {
          "type": "dir",
          "children": {}
        }
      }
    }
  }
}
